<product-complementary class="complementary-products" data-url="{{ routes.product_recommendations_url }}?section_id={{ sectionId }}&product_id={{ product.id }}&limit={{ block.limit }}&intent=complementary">
	{%- if recommendations.performed and recommendations.products_count > 0 -%}	
    <aside aria-label="{{ 'general.accessibility.complementary_products' | t }}" {{ block.shopify_attributes }} style="--cl:{{block.cl}};--fs:{{block.fs}}px;--fsm:{{block.fsm}}px;--fw:{{block.fw}};">
        
		<h4 class="tltxt tc" style="--mb:20px;--mbm:20px;">{{ block.title }}</h4>
		
		<div class="grid_bx m0 fl f-jcc f-wrap grid-products rwcols-{{block.gridmb}} rwcols-md-{{block.gridtb}} rwcols-lg-{{block.grid}}" role="list">      			
            {%- for product in recommendations.products limit: block.settings.products_per_page offset: continue -%}               
			<div class="ctlItem tc">
                    <a class="grid_lnk mb10" href="{{ product.url | within: collection }}">
                        <div class="grid_img lazyload mb15 lazyload{% if secondImg and product.images.size > 1 %} primary{% endif %}" data-bgset="{% render 'prgrid-img', image: product.featured_image, sizes: sizes %}" data-sizes="auto" data-parent-fit="contain"></div>
                    </a>
				   <div class="details"> 
           			  {% if vendorName %}<div class="grid_vendor">{{ product.vendor }}</div>{% endif %}        
					  <a href="{{ product.url | within: collection }}" class="grid_title">{{ product.title }}</a>        
					  {% unless settings.catalogmode %}<div class="grid_meta">{% render 'product-price', product: product %}</div>{% endunless %}        
					  {% if prReview %}{% render 'ratings', product: product %}{% endif %}
            		</div>                   
                </div>			
            {%- endfor -%}			
        </div>	
		
    </aside>	
    {%- endif -%}
</product-complementary>
<script>
class ProductComplementary extends HTMLElement {
  constructor(){super();}
  connectedCallback() {
    const handleIntersection = (entries, observer) => {
      if(!entries[0].isIntersecting) return;
      observer.unobserve(this);

      fetch(this.dataset.url).then(response => response.text()).then(text => {
          const html = document.createElement('div');
          html.innerHTML = text;
          const complementary = html.querySelector('product-complementary');
          if(complementary && complementary.innerHTML.trim().length){
            this.innerHTML = complementary.innerHTML;
          }
		  {% if block.pstyle == '1' %}
          if(html.querySelector('.complementary')){
            var option = $('.complementary').attr("data-flickity") || '{}';
            var flkty = new Flickity('.complementary.st1',JSON.parse(option));
          }
		  {% endif %}
        })
        .catch(e => {
          console.error(e);
        });
    }
    new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 400px 0px'}).observe(this);
  }
}
customElements.define('product-complementary', ProductComplementary);
</script>